
"No copies y pegues sin pensar: analiza, inspírate y haz el tuyo. Así es como realmente aprendes."

" *************************************************************************
" *   Copyright (C) 2025 by Jesús D. Garza Camarena                       *
" *   jesus.garzacmn@uanl.edu.mx                                          *
" *   Attribution-NonCommercial-ShareAlike 3.0 (CC-BY-NC-SA 3.0)          *
" *   https://creativecommons.org/licenses/by-nc-sa/3.0/                  *
" *                                                                       * 
" *   Example S03.1 - Lab Practice #03 HDL -Logic Gates                   *
" *   Device: GAL22V10 / ATF22v10                                         *
" *   Language: ABEL - HDL                                                *
" *   Revision: 1.0                                                       *
" *                                                                       *
" *   Date: 20/04/25                                                      *
" ************************************************************************/

//Coloca tus datos de esta manera pata presentar tu código
"Nombre de la actividad:
"Brigada : Dia y hora
"Nombres:
"N.L. : número de lista
"Fecha:


MODULE Compuertas               // Nombre del módulo: Compuertas

TITLE 'Compuertas Lógicas'      // Título descriptivo para el módulo

DECLARATIONS                    // Sección de declaraciones de entradas y salidas

"Inputs"                        // Comentario para indicar que las siguientes son entradas
a, b, c PIN 1,2,3;              // Entradas conectadas a los pines físicos 1, 2 y 3

"Outputs"                       // Comentario para indicar que las siguientes son salidas
and, or, nand, nor, exor PIN 23,22,21,20,19 ISTYPE 'COM'; 
// Salidas conectadas a los pines 23 a 19 respectivamente
// ISTYPE 'COM' indica que son salidas tipo combinacional

EQUATIONS                       // Sección donde se definen las ecuaciones lógicas

and  =   a & b & c;             // Salida 'and' es verdadera solo si a, b y c son 1 (AND lógico)
or   =   a # b # c;             // Salida 'or' es verdadera si al menos una de las entradas es 1 (OR lógico)
nand = !(a & b & c);            // Salida 'nand' es el inverso de AND (NOT AND)
nor  = !(a # b # c);            // Salida 'nor' es el inverso de OR (NOT OR)
exor =   a $ b $ c;             // Salida 'exor' es la operación XOR entre a, b y c (paridad impar)

END                             // Fin del módulo

